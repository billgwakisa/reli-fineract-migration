import { ConfigService } from '@nestjs/config';
import { IDatabaseCreateOptions, IDatabaseFindAllOptions, IDatabaseFindOneOptions, IDatabaseGetTotalOptions, IDatabaseManyOptions, IDatabaseSaveOptions } from 'src/common/database/interfaces/database.interface';
import { HelperDateService } from 'src/common/helper/services/helper.date.service';
import { HelperNumberService } from 'src/common/helper/services/helper.number.service';
import { ENUM_SETTING_DATA_TYPE } from 'src/modules/setting/constants/setting.enum.constant';
import { SettingCreateRequestDto } from 'src/modules/setting/dtos/request/setting.create.request.dto';
import { SettingUpdateRequestDto } from 'src/modules/setting/dtos/request/setting.update.request.dto';
import { SettingGetResponseDto } from 'src/modules/setting/dtos/response/setting.get.response.dto';
import { SettingListResponseDto } from 'src/modules/setting/dtos/response/setting.list.response.dto';
import { ISettingService } from 'src/modules/setting/interfaces/setting.service.interface';
import { SettingDoc } from 'src/modules/setting/repository/entities/setting.entity';
import { SettingRepository } from 'src/modules/setting/repository/repositories/setting.repository';
export declare class SettingService implements ISettingService {
    private readonly settingRepository;
    private readonly helperNumberService;
    private readonly configService;
    private readonly helperDateService;
    private readonly timezone;
    private readonly timezoneOffset;
    constructor(settingRepository: SettingRepository, helperNumberService: HelperNumberService, configService: ConfigService, helperDateService: HelperDateService);
    findAll(find?: Record<string, any>, options?: IDatabaseFindAllOptions): Promise<SettingDoc[]>;
    findOne(find: Record<string, any>, options?: IDatabaseFindOneOptions): Promise<SettingDoc>;
    findOneById(_id: string, options?: IDatabaseFindOneOptions): Promise<SettingDoc>;
    findOneByName(name: string, options?: IDatabaseFindOneOptions): Promise<SettingDoc>;
    getTotal(find?: Record<string, any>, options?: IDatabaseGetTotalOptions): Promise<number>;
    create({ name, description, type, value }: SettingCreateRequestDto, options?: IDatabaseCreateOptions): Promise<SettingDoc>;
    update(repository: SettingDoc, { description, value }: SettingUpdateRequestDto, options?: IDatabaseSaveOptions): Promise<SettingDoc>;
    delete(repository: SettingDoc, options?: IDatabaseSaveOptions): Promise<SettingDoc>;
    deleteMany(find: Record<string, any>, options?: IDatabaseManyOptions): Promise<boolean>;
    getValue<T>(type: ENUM_SETTING_DATA_TYPE, value: string): T;
    checkValue(type: ENUM_SETTING_DATA_TYPE, value: string): boolean;
    getTimezone(): Promise<string>;
    getTimezoneOffset(): Promise<string>;
    mapList<T = any>(settings: SettingDoc[]): Promise<SettingListResponseDto<T>[]>;
    mapGet<T = any>(setting: SettingDoc): Promise<SettingGetResponseDto<T>>;
}
